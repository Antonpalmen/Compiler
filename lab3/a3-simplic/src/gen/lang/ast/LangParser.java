package lang.ast;
import beaver.*;
import java.util.ArrayList;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.zip.DeflaterOutputStream;

// This is a parser generated by NeoBeaver.
public class LangParser extends beaver.Parser {
  
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

  public static class Terminals {
    public static final short EOF = 0;
    public static final short ID = 1;
    public static final short RPAR = 2;
    public static final short INT = 3;
    public static final short COMMA = 4;
    public static final short SEMI = 5;
    public static final short RBRACKET = 6;
    public static final short WHILE = 7;
    public static final short IF = 8;
    public static final short RETURN = 9;
    public static final short SUB = 10;
    public static final short ADD = 11;
    public static final short LPAR = 12;
    public static final short GT = 13;
    public static final short EQ = 14;
    public static final short NEQ = 15;
    public static final short LEQ = 16;
    public static final short GEQ = 17;
    public static final short LT = 18;
    public static final short NUMERAL = 19;
    public static final short MOD = 20;
    public static final short MUL = 21;
    public static final short DIV = 22;
    public static final short LBRACKET = 23;
    public static final short ASSIGN = 24;
    public static final short ELSE = 25;
    public static final short PRINT = 26;

    public static final String[] NAMES = {
        "EOF",
        "ID",
        "RPAR",
        "INT",
        "COMMA",
        "SEMI",
        "RBRACKET",
        "WHILE",
        "IF",
        "RETURN",
        "SUB",
        "ADD",
        "LPAR",
        "GT",
        "EQ",
        "NEQ",
        "LEQ",
        "GEQ",
        "LT",
        "NUMERAL",
        "MOD",
        "MUL",
        "DIV",
        "LBRACKET",
        "ASSIGN",
        "ELSE",
        "PRINT",
    };
  }

  private final Action[] actions = {
    new Action() { // [0] program = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new Program(new List());
      }
    },
    new Action() { // [1] program =  functionList
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List list = (List) _symbols[offset + 1].value;
        return new Program(list);
      }
    },
    new Action() { // [2] functionList =  function
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Function f = (Function) _symbols[offset + 1].value;
        return new List().add(f);
      }
    },
    new Action() { // [3] GOAL =  program EOF
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Program program = (Program) _symbols[offset + 1].value;
        final Symbol sym2 = _symbols[offset + 2];
        return program;
      }
    },
    new Action() { // [4] functionList =  functionList function
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List list = (List) _symbols[offset + 1].value;
        final Function f = (Function) _symbols[offset + 2].value;
        return list.add(f);
      }
    },
    new Action() { // [5] idDecl =  ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        return new IdDecl(id);
      }
    },
    new Action() { // [6] parameterList =  INT idDecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl a = (IdDecl) _symbols[offset + 2].value;
        return new List().add(a);
      }
    },
    Action.RETURN, // [7] statement =  declaration (default action: return symbol 1)
    new Action() { // [8] statementList =  statement
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Statement stmt = (Statement) _symbols[offset + 1].value;
        return new List().add(stmt);
      }
    },
    new Action() { // [9] function =  INT idDecl LPAR RPAR LBRACKET RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl funcID = (IdDecl) _symbols[offset + 2].value;
        final Symbol LPAR = _symbols[offset + 3];
        final Symbol RPAR = _symbols[offset + 4];
        final Symbol LBRACKET = _symbols[offset + 5];
        final Symbol RBRACKET = _symbols[offset + 6];
        return new Function(funcID, new List(), new List());
      }
    },
    new Action() { // [10] idUse =  ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        return new IdUse(id);
      }
    },
    new Action() { // [11] parameterList =  parameterList COMMA INT idDecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        final Symbol COMMA = _symbols[offset + 2];
        final Symbol INT = _symbols[offset + 3];
        final IdDecl b = (IdDecl) _symbols[offset + 4].value;
        return a.add(b);
      }
    },
    new Action() { // [12] function =  INT idDecl LPAR parameterList RPAR LBRACKET RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl funcID = (IdDecl) _symbols[offset + 2].value;
        final Symbol LPAR = _symbols[offset + 3];
        final List list = (List) _symbols[offset + 4].value;
        final Symbol RPAR = _symbols[offset + 5];
        final Symbol LBRACKET = _symbols[offset + 6];
        final Symbol RBRACKET = _symbols[offset + 7];
        return new Function(funcID, list, new List());
      }
    },
    new Action() { // [13] statementList =  statementList statement
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List stmtList = (List) _symbols[offset + 1].value;
        final Statement stmt = (Statement) _symbols[offset + 2].value;
        return stmtList.add(stmt);
      }
    },
    new Action() { // [14] function =  INT idDecl LPAR RPAR LBRACKET statementList RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl funcID = (IdDecl) _symbols[offset + 2].value;
        final Symbol LPAR = _symbols[offset + 3];
        final Symbol RPAR = _symbols[offset + 4];
        final Symbol LBRACKET = _symbols[offset + 5];
        final List list = (List) _symbols[offset + 6].value;
        final Symbol RBRACKET = _symbols[offset + 7];
        return new Function(funcID, new List(), list);
      }
    },
    new Action() { // [15] functionCall =  functionUse SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final FunctionUse f = (FunctionUse) _symbols[offset + 1].value;
        final Symbol SEMI = _symbols[offset + 2];
        return new FunctionCall(f);
      }
    },
    Action.RETURN, // [16] comparison =  lt (default action: return symbol 1)
    Action.RETURN, // [17] factor =  numeral (default action: return symbol 1)
    Action.RETURN, // [18] term =  mul (default action: return symbol 1)
    Action.RETURN, // [19] numericalExpression =  sub (default action: return symbol 1)
    Action.RETURN, // [20] expression =  comparison (default action: return symbol 1)
    new Action() { // [21] numeral =  NUMERAL
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol num = _symbols[offset + 1];
        return new Numeral(num);
      }
    },
    new Action() { // [22] function =  INT idDecl LPAR parameterList RPAR LBRACKET statementList RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl funcID = (IdDecl) _symbols[offset + 2].value;
        final Symbol LPAR = _symbols[offset + 3];
        final List parameters = (List) _symbols[offset + 4].value;
        final Symbol RPAR = _symbols[offset + 5];
        final Symbol LBRACKET = _symbols[offset + 6];
        final List statements = (List) _symbols[offset + 7].value;
        final Symbol RBRACKET = _symbols[offset + 8];
        return new Function(funcID, parameters, statements);
      }
    },
    new Action() { // [23] declaration =  INT idDecl SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl id = (IdDecl) _symbols[offset + 2].value;
        final Symbol SEMI = _symbols[offset + 3];
        return new Declaration(id, new Opt());
      }
    },
    new Action() { // [24] return =  RETURN expression SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol RETURN = _symbols[offset + 1];
        final Expression e = (Expression) _symbols[offset + 2].value;
        final Symbol SEMI = _symbols[offset + 3];
        return new Return(e);
      }
    },
    new Action() { // [25] argList =  expression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression e = (Expression) _symbols[offset + 1].value;
        return new List().add(e);
      }
    },
    new Action() { // [26] functionUse =  idUse LPAR RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse id = (IdUse) _symbols[offset + 1].value;
        final Symbol LPAR = _symbols[offset + 2];
        final Symbol RPAR = _symbols[offset + 3];
        return new FunctionUse(id, new List());
      }
    },
    new Action() { // [27] factor =  LPAR expression RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LPAR = _symbols[offset + 1];
        final Expression e = (Expression) _symbols[offset + 2].value;
        final Symbol RPAR = _symbols[offset + 3];
        return e;
      }
    },
    new Action() { // [28] div =  term DIV factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression t = (Expression) _symbols[offset + 1].value;
        final Symbol DIV = _symbols[offset + 2];
        final Expression f = (Expression) _symbols[offset + 3].value;
        return new Div(t, f);
      }
    },
    new Action() { // [29] mod =  term MOD factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression t = (Expression) _symbols[offset + 1].value;
        final Symbol MOD = _symbols[offset + 2];
        final Expression f = (Expression) _symbols[offset + 3].value;
        return new Mod(t, f);
      }
    },
    new Action() { // [30] mul =  term MUL factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression t = (Expression) _symbols[offset + 1].value;
        final Symbol MUL = _symbols[offset + 2];
        final Expression f = (Expression) _symbols[offset + 3].value;
        return new Mul(t, f);
      }
    },
    new Action() { // [31] leq =  numericalExpression LEQ numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol LEQ = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new LesserThanEqual(a, b);
      }
    },
    new Action() { // [32] gt =  numericalExpression GT numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol GT = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new GreaterThan(a, b);
      }
    },
    new Action() { // [33] add =  numericalExpression ADD term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression e = (Expression) _symbols[offset + 1].value;
        final Symbol ADD = _symbols[offset + 2];
        final Expression t = (Expression) _symbols[offset + 3].value;
        return new Add(e, t);
      }
    },
    new Action() { // [34] eq =  numericalExpression EQ numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol EQ = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new Equal(a, b);
      }
    },
    new Action() { // [35] neq =  numericalExpression NEQ numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol NEQ = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new NotEqual(a, b);
      }
    },
    new Action() { // [36] lt =  numericalExpression LT numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol LT = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new LesserThan(a, b);
      }
    },
    new Action() { // [37] sub =  numericalExpression SUB term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression e = (Expression) _symbols[offset + 1].value;
        final Symbol SUB = _symbols[offset + 2];
        final Expression t = (Expression) _symbols[offset + 3].value;
        return new Sub(e, t);
      }
    },
    new Action() { // [38] geq =  numericalExpression GEQ numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol GEQ = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new GreaterThanEqual(a, b);
      }
    },
    new Action() { // [39] return =  RETURN SUB expression SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol RETURN = _symbols[offset + 1];
        final Symbol SUB = _symbols[offset + 2];
        final Expression e = (Expression) _symbols[offset + 3].value;
        final Symbol SEMI = _symbols[offset + 4];
        return new Return(e);
      }
    },
    new Action() { // [40] functionUse =  idUse LPAR argList RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse id = (IdUse) _symbols[offset + 1].value;
        final Symbol LPAR = _symbols[offset + 2];
        final List list = (List) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        return new FunctionUse(id, list);
      }
    },
    new Action() { // [41] assignment =  idUse ASSIGN expression SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse id = (IdUse) _symbols[offset + 1].value;
        final Symbol ASSIGN = _symbols[offset + 2];
        final Expression e = (Expression) _symbols[offset + 3].value;
        final Symbol SEMI = _symbols[offset + 4];
        return new Assignment(id, e);
      }
    },
    new Action() { // [42] declaration =  INT idDecl ASSIGN expression SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl id = (IdDecl) _symbols[offset + 2].value;
        final Symbol ASSIGN = _symbols[offset + 3];
        final Expression e = (Expression) _symbols[offset + 4].value;
        final Symbol SEMI = _symbols[offset + 5];
        return new Declaration(id, new Opt(e));
      }
    },
    new Action() { // [43] argList =  argList COMMA expression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List list = (List) _symbols[offset + 1].value;
        final Symbol COMMA = _symbols[offset + 2];
        final Expression e = (Expression) _symbols[offset + 3].value;
        return list.add(e);
      }
    },
    new Action() { // [44] while =  WHILE LPAR expression RPAR LBRACKET RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol WHILE = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expression c = (Expression) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Symbol LBRACKET = _symbols[offset + 5];
        final Symbol RBRACKET = _symbols[offset + 6];
        return new WhileStatement(c, new List());
      }
    },
    new Action() { // [45] if =  IF LPAR expression RPAR LBRACKET RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expression c = (Expression) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Symbol LBRACKET = _symbols[offset + 5];
        final Symbol RBRACKET = _symbols[offset + 6];
        return new IfStatement(c, new List(), new Opt());
      }
    },
    new Action() { // [46] while =  WHILE LPAR expression RPAR LBRACKET statementList RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol WHILE = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expression c = (Expression) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Symbol LBRACKET = _symbols[offset + 5];
        final List list = (List) _symbols[offset + 6].value;
        final Symbol RBRACKET = _symbols[offset + 7];
        return new WhileStatement(c, list);
      }
    },
    new Action() { // [47] if =  IF LPAR expression RPAR LBRACKET statementList RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expression c = (Expression) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Symbol LBRACKET = _symbols[offset + 5];
        final List list = (List) _symbols[offset + 6].value;
        final Symbol RBRACKET = _symbols[offset + 7];
        return new IfStatement(c, list, new Opt());
      }
    },
    new Action() { // [48] if =  IF LPAR expression RPAR LBRACKET RBRACKET else
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expression c = (Expression) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Symbol LBRACKET = _symbols[offset + 5];
        final Symbol RBRACKET = _symbols[offset + 6];
        final Else opt = (Else) _symbols[offset + 7].value;
        return new IfStatement(c, new List(), new Opt(opt));
      }
    },
    new Action() { // [49] if =  IF LPAR expression RPAR LBRACKET statementList RBRACKET else
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expression c = (Expression) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Symbol LBRACKET = _symbols[offset + 5];
        final List list = (List) _symbols[offset + 6].value;
        final Symbol RBRACKET = _symbols[offset + 7];
        final Else opt = (Else) _symbols[offset + 8].value;
        return new IfStatement(c, list, new Opt(opt));
      }
    },
    new Action() { // [50] else =  ELSE LBRACKET RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol ELSE = _symbols[offset + 1];
        final Symbol LBRACKET = _symbols[offset + 2];
        final Symbol RBRACKET = _symbols[offset + 3];
        return new Else(new List());
      }
    },
    new Action() { // [51] else =  ELSE LBRACKET statementList RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol ELSE = _symbols[offset + 1];
        final Symbol LBRACKET = _symbols[offset + 2];
        final List list = (List) _symbols[offset + 3].value;
        final Symbol RBRACKET = _symbols[offset + 4];
        return new Else(list);
      }
    },
  };

  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9pjcsUG54KKn$#RBYntv2WvdDoHeqSs40GZIKn8D84HSo2LLPQMvHVBiYm$M5PPMdxGCbJ" +
    "vLSjlYe0OG450KObcH1157FzlUdftPtRkPhelS2ZTzNkptTl$zrxtzCpkxTu2bVCS1wLeXG" +
    "pII2A5ChHrDc801kDyJC0I3CE3w8VURcifMm#xBQ04FT49Pw4pkg0R#WTQG7UeeaPNgORpZ" +
    "tl858okSKV3zJ#6$aTW98PZBCPX4aPvgfFYXROMup4PKp0H5s0epWbu4G$Bw46Nylfyveho" +
    "EKFxTFusK5sOKvrmyppX6nFj9#lvkIWtew1cUN5ivoz1hAylD5h1g4fKUD6kp4MBph8DQUt" +
    "fhlRfykMgW8yRZ5R#sfpNTWQgHJbL#oBLzQugs7kZprU7ekTl2bNTNAXo$dJnZrbHf5aPoB" +
    "elwU4#weMEw8e#aQikrqovDzExGdPxD##QAIntkwfyhBEzM46LkXvrkTTj3oow7eklJt#Hw" +
    "$4uL#Eukox7LOt8S4saAZmMb2AWYbEgOuqAnlf38LRLM2gx3FFdQr1kRqINybYZ6YL3vrZU" +
    "6fGXXkDLwLlKSnuPxUivDpZ4EIg8rUrWrNrgh5Ucrf73jFeIj5p3tnM69RytfiVV6ywHl3M" +
    "CLLmYLjvEvVoc4Ajgd0ITmtbhK6R66ZKh4EjNXLXLupXnVX74cXJdPq6iRkiUNNNBf$f94A" +
    "lRkaTNtJfbgXy5iRgjUtGDNGwx7TLq6Lw2It6nJsLtbdyGn3P8DH#pQI$77Cp5PRW2yq9Lp" +
    "RaFxM9PxGsxM5XWE5x5#buGgzkwHrVTyidiTc$OoazjcfLdXjUOPsWvhqDvQr0M6evNvJeR" +
    "aNDG8LRLM3Axryh5fjar8DOPrHbL7IhdW4Aigg5UWkMMMAE2vJPogwd8sQymLEqJnEgsxj5" +
    "LjtoosqtZkEKEAzMTLgfLDY9dho1MjtMFhhhbKtqdYDLjtQEhRlbKtmfYTLltwAfRFjKtWb" +
    "ZTrZswwfPFjKSGwnNrZYXgDRuMn1gflXB4whRkqHLXxmzt2sADOkqIn1gfTWfYZLHV2c9rM" +
    "$VeYh1vxH346iNQhX2hQhG6jdUsBmInkgrxTDKjd#fpXLXLOsUe$ZQ$n#1pcxpgFeE$wBSf" +
    "nAeQIxLLOLZo6TvlaE5d2h6g6iPwm23MfmgngaO87dB7Vg8GgsgiM1yhnAeQAzOMXLXLuyJ" +
    "2wbYZWXb#f12hQYnPVkNNMktUTGRdQxD2hAgnL9iKObNbmt6OY1JjU4p0EQoJNTkTEVL4Bz" +
    "IwZtmjnu5y3ZuGrQZ180p647#BpuzrtEADrYsuDXKShSQv$djpzdtH3$qn05LQvJwRmb0Cm" +
    "t3ta$rHl6UD2MJWUN2yWaHzFdEZWZvXfrBpyes9z8EA8ZznOYT96fc0fr0bkkPLnUiNdQKN" +
    "AqHN47jIaG#xbUzYfKhLCVFwvrL7h5Yh4HmJaJKIUcUW1AKeGtdagikpYVftknCe6AjKmLX" +
    "5rwLxFGPK5KMZwesbCuoAPPTXM0bRm#Y2YZYZ6YbMCwlCYsMia3jR35KcUao8gcXUo0RF8Z" +
    "eKZGdS3v55A#xeIhH66xH5ExHdNqTqGcSUy$V3ElP6VaHT6LgiePjXd96D4ClkV8NkgCYLj" +
    "rQrh7qOFESDESkcEpzizzA6xjx$cYfaDUnsr2cSLxpIT7kZEMCrrMeqwRpiNediLgFHTczT" +
    "hrzrgsBEAo4wumpjvcLtnmx9hybKZVZkAyvPjilG8jOPrHbLFIgBFT#0ksXpgepls7RpwjA" +
    "CgkPy$JfDLNQhOQTg#HdQgPfeNity2cltdgtbVzhJmZzpQC4gT3jDOjczEhJWbMzS5O3rw$" +
    "DVOybleEJNCdEW$eFcCV8YUOl8zyo7WKG5gIP3oKAod3nDtY0VadtaA92ahoHz9UahkPJGL" +
    "vA#ak#GxUG8a6f3giWqieZSGPuXz9NQI0u0wGJfGMh9FBA2F4xeAqrVQVfAqrUcDQaXqybY" +
    "yX2XhyoRXBuo#u4I#YgXhnBwAfbBLXBwAdc9l4js4EPUsfOC8VHLkeIi9iyIhaFfPd8GA4k" +
    "HNcGycK#OUzaJv6No7jb9ZW7bbMGmcK6u3kKFaaV8yuJhLKvVMVhAqbUMlhBqbQMlB7rbwI" +
    "jBNrdwoj9NgtQ4wzvg9bb6rfBdoDja2pa4L6H87pAHB22ho9Fa5V8QsKsE0vKTo30oIyu$j" +
    "yIcTMgJRF2EdyYn49RtlUEd8SyT8rl9oU1pXJ1KHnws1VggGyRLUaUU9znMdy#0xgcuOmiq" +
    "7nGytilzswPuJ6AGDy$3H7v58V#3$ohxkKSI9MGsuLv9yBf9h26FckOHFz$42mMFNoSR2jg" +
    "xlEDU7dPuEUy9w4doh88v5zm2$hTb37ZraGGcaCb8yfZatJ21YJmEvd4i6SSxPtUtByt7fU" +
    "nBkiSXF0vbVqyYtzJs9oD8BrTJXe7kj$CfJ69RldFlIVgGtgGl6KP6aG54ldqTJaQJAZBIr" +
    "QQfIsCG6OWC$QHGpLngI3NZr#GeGosVg#MuAVy2MIf$#0==");

  public LangParser() {
    super(PARSING_TABLES);
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
