package lang.ast;
import beaver.*;
import java.util.ArrayList;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.zip.DeflaterOutputStream;

// This is a parser generated by NeoBeaver.
public class LangParser extends beaver.Parser {
  
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

  public static class Terminals {
    public static final short EOF = 0;
    public static final short SUB = 1;
    public static final short RPAR = 2;
    public static final short ID = 3;
    public static final short COMMA = 4;
    public static final short SEMI = 5;
    public static final short ADD = 6;
    public static final short INT = 7;
    public static final short LPAR = 8;
    public static final short EQ = 9;
    public static final short LT = 10;
    public static final short NEQ = 11;
    public static final short LEQ = 12;
    public static final short GEQ = 13;
    public static final short GT = 14;
    public static final short RETURN = 15;
    public static final short WHILE = 16;
    public static final short INTEGER = 17;
    public static final short RBRACKET = 18;
    public static final short IF = 19;
    public static final short MUL = 20;
    public static final short DIV = 21;
    public static final short MOD = 22;
    public static final short LBRACKET = 23;
    public static final short ASSIGN = 24;
    public static final short ELSE = 25;
    public static final short BOOLEAN = 26;
    public static final short PRINT = 27;

    public static final String[] NAMES = {
        "EOF",
        "SUB",
        "RPAR",
        "ID",
        "COMMA",
        "SEMI",
        "ADD",
        "INT",
        "LPAR",
        "EQ",
        "LT",
        "NEQ",
        "LEQ",
        "GEQ",
        "GT",
        "RETURN",
        "WHILE",
        "INTEGER",
        "RBRACKET",
        "IF",
        "MUL",
        "DIV",
        "MOD",
        "LBRACKET",
        "ASSIGN",
        "ELSE",
        "BOOLEAN",
        "PRINT",
    };
  }

  private final Action[] actions = {
    new Action() { // [0] program = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new Program(new List());
      }
    },
    new Action() { // [1] program =  functionList
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List list = (List) _symbols[offset + 1].value;
        return new Program(list);
      }
    },
    new Action() { // [2] functionList =  function
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Function f = (Function) _symbols[offset + 1].value;
        return new List().add(f);
      }
    },
    new Action() { // [3] functionList =  functionList function
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List list = (List) _symbols[offset + 1].value;
        final Function f = (Function) _symbols[offset + 2].value;
        return list.add(f);
      }
    },
    new Action() { // [4] GOAL =  program EOF
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Program program = (Program) _symbols[offset + 1].value;
        final Symbol sym2 = _symbols[offset + 2];
        return program;
      }
    },
    new Action() { // [5] idDecl =  ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        return new IdDecl(id);
      }
    },
    new Action() { // [6] parameterList =  INT idDecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl a = (IdDecl) _symbols[offset + 2].value;
        return new List().add(a);
      }
    },
    new Action() { // [7] function =  INT idDecl LPAR RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl funcID = (IdDecl) _symbols[offset + 2].value;
        final Symbol LPAR = _symbols[offset + 3];
        final Symbol RPAR = _symbols[offset + 4];
        final Block block = (Block) _symbols[offset + 5].value;
        return new Function(funcID, new List(), block);
      }
    },
    new Action() { // [8] function =  INT idDecl LPAR parameterList RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl funcID = (IdDecl) _symbols[offset + 2].value;
        final Symbol LPAR = _symbols[offset + 3];
        final List list = (List) _symbols[offset + 4].value;
        final Symbol RPAR = _symbols[offset + 5];
        final Block block = (Block) _symbols[offset + 6].value;
        return new Function(funcID, list, block);
      }
    },
    Action.RETURN, // [9] statement =  declaration (default action: return symbol 1)
    new Action() { // [10] statementList =  statement
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Statement statement = (Statement) _symbols[offset + 1].value;
        return new List().add(statement);
      }
    },
    new Action() { // [11] block =  LBRACKET RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACKET = _symbols[offset + 1];
        final Symbol RBRACKET = _symbols[offset + 2];
        return new Block(new List());
      }
    },
    new Action() { // [12] idUse =  ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        return new IdUse(id);
      }
    },
    new Action() { // [13] parameterList =  parameterList COMMA INT idDecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        final Symbol COMMA = _symbols[offset + 2];
        final Symbol INT = _symbols[offset + 3];
        final IdDecl b = (IdDecl) _symbols[offset + 4].value;
        return a.add(b);
      }
    },
    new Action() { // [14] statementList =  statementList statement
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List statementList = (List) _symbols[offset + 1].value;
        final Statement statement = (Statement) _symbols[offset + 2].value;
        return statementList.add(statement);
      }
    },
    new Action() { // [15] block =  LBRACKET statementList RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACKET = _symbols[offset + 1];
        final List statement = (List) _symbols[offset + 2].value;
        final Symbol RBRACKET = _symbols[offset + 3];
        return new Block(statement);
      }
    },
    Action.RETURN, // [16] comparison =  neq (default action: return symbol 1)
    Action.RETURN, // [17] term =  factor (default action: return symbol 1)
    Action.RETURN, // [18] numericalExpression =  term (default action: return symbol 1)
    Action.RETURN, // [19] factor =  integer (default action: return symbol 1)
    Action.RETURN, // [20] expression =  comparison (default action: return symbol 1)
    new Action() { // [21] integer =  INTEGER
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol value = _symbols[offset + 1];
        return new IntegerValue(value);
      }
    },
    new Action() { // [22] functionCall =  functionUse SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final FunctionUse f = (FunctionUse) _symbols[offset + 1].value;
        final Symbol SEMI = _symbols[offset + 2];
        return new FunctionCall(f);
      }
    },
    new Action() { // [23] return =  RETURN expression SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol RETURN = _symbols[offset + 1];
        final Expression e = (Expression) _symbols[offset + 2].value;
        final Symbol SEMI = _symbols[offset + 3];
        return new Return(e);
      }
    },
    new Action() { // [24] factor =  SUB factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol SUB = _symbols[offset + 1];
        final Expression b = (Expression) _symbols[offset + 2].value;
        return new Sub(new IntegerValue("0"),b);
      }
    },
    new Action() { // [25] declaration =  INT idDecl SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl id = (IdDecl) _symbols[offset + 2].value;
        final Symbol SEMI = _symbols[offset + 3];
        return new Declaration(id, new Opt());
      }
    },
    new Action() { // [26] argList =  expression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression e = (Expression) _symbols[offset + 1].value;
        return new List().add(e);
      }
    },
    new Action() { // [27] functionUse =  idUse LPAR RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse id = (IdUse) _symbols[offset + 1].value;
        final Symbol LPAR = _symbols[offset + 2];
        final Symbol RPAR = _symbols[offset + 3];
        return new FunctionUse(id, new List());
      }
    },
    new Action() { // [28] mod =  term MOD factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression t = (Expression) _symbols[offset + 1].value;
        final Symbol MOD = _symbols[offset + 2];
        final Expression f = (Expression) _symbols[offset + 3].value;
        return new Mod(t, f);
      }
    },
    new Action() { // [29] div =  term DIV factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression t = (Expression) _symbols[offset + 1].value;
        final Symbol DIV = _symbols[offset + 2];
        final Expression f = (Expression) _symbols[offset + 3].value;
        return new Div(t, f);
      }
    },
    new Action() { // [30] mul =  term MUL factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression t = (Expression) _symbols[offset + 1].value;
        final Symbol MUL = _symbols[offset + 2];
        final Expression f = (Expression) _symbols[offset + 3].value;
        return new Mul(t, f);
      }
    },
    new Action() { // [31] factor =  LPAR expression RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LPAR = _symbols[offset + 1];
        final Expression e = (Expression) _symbols[offset + 2].value;
        final Symbol RPAR = _symbols[offset + 3];
        return e;
      }
    },
    new Action() { // [32] lt =  numericalExpression LT numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol LT = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new LesserThan(a, b);
      }
    },
    new Action() { // [33] geq =  numericalExpression GEQ numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol GEQ = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new GreaterThanEqual(a, b);
      }
    },
    new Action() { // [34] eq =  numericalExpression EQ numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol EQ = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new Equal(a, b);
      }
    },
    new Action() { // [35] sub =  numericalExpression SUB term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression e = (Expression) _symbols[offset + 1].value;
        final Symbol SUB = _symbols[offset + 2];
        final Expression t = (Expression) _symbols[offset + 3].value;
        return new Sub(e, t);
      }
    },
    new Action() { // [36] neq =  numericalExpression NEQ numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol NEQ = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new NotEqual(a, b);
      }
    },
    new Action() { // [37] leq =  numericalExpression LEQ numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol LEQ = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new LesserThanEqual(a, b);
      }
    },
    new Action() { // [38] gt =  numericalExpression GT numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol GT = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new GreaterThan(a, b);
      }
    },
    new Action() { // [39] add =  numericalExpression ADD term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression e = (Expression) _symbols[offset + 1].value;
        final Symbol ADD = _symbols[offset + 2];
        final Expression t = (Expression) _symbols[offset + 3].value;
        return new Add(e, t);
      }
    },
    new Action() { // [40] functionUse =  idUse LPAR argList RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse id = (IdUse) _symbols[offset + 1].value;
        final Symbol LPAR = _symbols[offset + 2];
        final List list = (List) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        return new FunctionUse(id, list);
      }
    },
    new Action() { // [41] assignment =  idUse ASSIGN expression SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse id = (IdUse) _symbols[offset + 1].value;
        final Symbol ASSIGN = _symbols[offset + 2];
        final Expression e = (Expression) _symbols[offset + 3].value;
        final Symbol SEMI = _symbols[offset + 4];
        return new Assignment(id, e);
      }
    },
    new Action() { // [42] if =  IF LPAR expression RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expression c = (Expression) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Block block = (Block) _symbols[offset + 5].value;
        return new IfStatement(c, block, new Opt());
      }
    },
    new Action() { // [43] declaration =  INT idDecl ASSIGN expression SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl id = (IdDecl) _symbols[offset + 2].value;
        final Symbol ASSIGN = _symbols[offset + 3];
        final Expression e = (Expression) _symbols[offset + 4].value;
        final Symbol SEMI = _symbols[offset + 5];
        return new Declaration(id, new Opt(e));
      }
    },
    new Action() { // [44] while =  WHILE LPAR expression RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol WHILE = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expression c = (Expression) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Block block = (Block) _symbols[offset + 5].value;
        return new WhileStatement(c,block);
      }
    },
    new Action() { // [45] argList =  argList COMMA expression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List list = (List) _symbols[offset + 1].value;
        final Symbol COMMA = _symbols[offset + 2];
        final Expression e = (Expression) _symbols[offset + 3].value;
        return list.add(e);
      }
    },
    new Action() { // [46] if =  IF LPAR expression RPAR block ELSE block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expression c = (Expression) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Block block = (Block) _symbols[offset + 5].value;
        final Symbol ELSE = _symbols[offset + 6];
        final Block b = (Block) _symbols[offset + 7].value;
        return new IfStatement(c,block, new Opt(b));
      }
    },
  };

  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9pjcbbi5LKOn$$TL$PTQ0kqGA5qemijfIo2eeWWgBY0eBAue2BueD47D3xuuFPaVF11ep4" +
    "Q7pJ66EEJHcDCJ8mWOYbb1wtiOiMbeCV$cNFddfbxP#RUEPIH9dpDx$lEzytvppbdpjovjx" +
    "q5YfSBWHpaeW1568mXoCPmiHsJC1UPU0XPACC4pCGiB4O37i4MmAhGnBzMVHNhqh992Qv2E" +
    "SPY54QZWla8HsMoLP6MP#cggAj6FMem7RDHXnbeHXFQqOWspC5KJBDwhMOl6UzYp0$KBNJf" +
    "TAzxnJzm6BEWirmNFml41PVkGg3kLeVkV63FbJxpt2XwgUsblqt6f7EijSvXpwRNCRN2mF7" +
    "kq3DBi07nLd7I6Uwspf1OlSUg3g9YODAnTPwAzOvP9#$V1kUQV6reuFhkyrtVi43TPb$Tq9" +
    "GpyZJnjoAqxY$$BD0cnkAuXFeObDAFnqWVNNxQ8xXC$EcV1LhmFAVuphCoxH5S9lvmHrsN5" +
    "UKzTUVSKTTbHNbFQu5U8r2RTBorZ#Tfg3FUTzFnvfcDX$afZb$jNHQ$Qw#ZFYehohiLM60o" +
    "IQfxH8$oEje$xbxgUBmIyRwBtnHXJPnrHrsN5UKzTRzghwC#AYlAknN6hwCp4kd3cR7kj3Y" +
    "jl8nsI#UwbpDdvPGufRoCTaldCLk4Qt5Ddundg3FUX$JMbwoxjDSpURoJugJoCjejdUjUpf" +
    "nsVT1P0yOplSzEIAGFgNElRtxQwpFTz#FYkF8osYsTwrxEt7mVJAydbiQlw0ehln4tO1bkm" +
    "X8i3v95$Np1pMdrkYMfOhX$rDrkg3ExNuwvewxBYlAUTgTFFPMPNvTeTMjywYbC$EAEkYuh" +
    "odlgkaMtyZBQBPthNiuS$UTwNj5vclZP7NLTLfJlqtdUxrDFOU8dHMXxa3nWCDvHSLHv6Us" +
    "MpdKlPqxRP317QQP$PpWYZYWleztIkUxbp5avB0uhBwFTqhdkvSnPEIGEAI#ZtTAvxkNCMJ" +
    "ae3YeleztIkUxbp27Vfm#mVe1#HQWBirJifsu$VLZTFkhsqOVIYRrYh$8osYsTnopfypp7w" +
    "sBlBlgmyzn3tHxwiBfEwZhfmwrljzYjl8nsI#SnIrxVmw5cfytmzM3y7EmG7ShBQBTqhdiv" +
    "SrP#T4TTbnNbFSVRvOwwBYlAn#rHn$4Vt57NPKLvp$5skgEkouhodhhl5Q7Dz7csmnrrNLQ" +
    "KHpr$wj1EQf57Mjcgmsosvc0SIYnAKSQyLWYP2HfWrwqiZyn00nhHX6RCH0lpMOaLjmxZCO" +
    "7tLZagC0cJCGMLrb#Cgp0TrQY9zx9ZLaYTtGl2OLnVMcUHypJL6SupazfivA2DCT$x7F7PZ" +
    "7RCpATlyipS9iTBiJRlgffd24Li59$zIvnNqZn76QulxHrB72$LZ7pcQLqN0rt2VPQsBijR" +
    "WK4OJ3yKmu9rOItoUUQ7czz5ZsUgot1Uq#HPOyXbCa$JVOzw$rBedCy#LzswFyFC5cCidsC" +
    "upupu4plNUWeNe115ACO037Jq6euH6EcSTUJxRlfSCXtFT1zCNqUnNV1VIH$hNFlELk2#zq" +
    "UTuJwaDPwfpdHzVJYUwNFYVxq$KpsNdBfBkUzzU7zUqjUjXoxg$KjBaVmkU37xPwOp7EyYt" +
    "iTCpFowHAmpNP$nvzQetn#kw2uBNTI$vvZUrwQVMqrrKNykCFqxGx$v7DatEjFh4hNkolfY" +
    "bSXV3#QVUupM5y7lx#etukZ6SnqtVNwQxb$AUGBO#hJ#waB#fxFyLah#Nv7y9kS5yYxvWiZ" +
    "lpdg1Z96adhII3MGBUPDyJZh9EI1pEAac2mdxP3v3NYUVabtaB90rW5IGUMGzUOgyHZucEy" +
    "Xf8Bk0L985P0rvahnAFYBVaHD0JXuf9tF9Al8uUPcyJxuXtK1k5YaZRMGbUOoyHDuZNv8ZH" +
    "01vOqaJMK4sa#V9EuJhpzj7pWFveqW3MKOsaUV8M#GpqaMu$W9Uru8QifXi9CyIhgtWRT91" +
    "Ue32GQIAB2Bho3R2FeMVa9ta351KHBYs8bxBehM4rwZe5V8X#POS0ufp2QzbSRlSHsxkTh9" +
    "ZczhedJ8cGliw5dUHZbYxqt6yX#o9jIyujHoYnD6lo#lyVb3R6d1iTIezxLoAypz1NYHVEM" +
    "ePf8uq9lJzWCZ$697$3Rn4NZfsBIHZs7v3zSbeyfd7$Z3hTkWuNiRoWEFTiRbjDVj6ij#P$" +
    "1OK90EpBJBHIkhORcUiv$j7FN8na$aiKilQEEjODlDCvbcOmhoSL91ICesKaHaytiZZfOpD" +
    "Z6sibJ1E8EF9HEjO5gQJ6ZALJ2RLf8fKaacaX6CraHREfPaqo6yHMMz17kR#1xMv9rq=");

  public LangParser() {
    super(PARSING_TABLES);
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
