%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals ID, LPAR, RPAR, LBRACKET, RBRACKET, INT, SEMI, ASSIGN, ADD, SUB,
 MUL, DIV, MOD, IF, ELSE, WHILE, LT, GT, EQ, NEQ, LEQ, GEQ, COMMA, RETURN, PRINT, INTEGER, BOOLEAN;

%typeof program = "Program";
%typeof function = "Function";
%typeof functionList = "List";
%typeof block = "Block";
%typeof idDecl = "IdDecl";
%typeof idUse = "IdUse";
%typeof declaration = "Declaration";
%typeof assignment = "Assignment";
%typeof statementList = "List";
%typeof statement = "Statement";
%typeof if = "IfStatement";
%typeof else = "Else";
%typeof while = "WhileStatement";
%typeof comparison = "Comparison";
%typeof lt = "LesserThan";
%typeof gt = "GreaterThan";
%typeof leq = "LesserThanEqual";
%typeof geq = "GreaterThanEqual";
%typeof eq = "Equal";
%typeof neq = "NotEqual";
%typeof expression = "Expression";
%typeof term = "Expression";
%typeof factor = "Expression";
%typeof numericalExpression = "Expression";
%typeof add = "Add";
%typeof sub = "Sub";
%typeof mul = "Mul";
%typeof div = "Div";
%typeof mod = "Mod";
%typeof parameterList = "List";
%typeof return = "Return";
%typeof functionUse = "FunctionUse";
%typeof functionCall = "FunctionCall";
%typeof integer = "IntegerValue";
%typeof argList = "List";


%goal program;

program = /* epsilon */ {: return new Program(new List()); :}
          | functionList.list {: return new Program(list); :} ;

idDecl = ID.id {: return new IdDecl(id); :} ;
idUse = ID.id{: return new IdUse(id); :} ;
return = RETURN expression.e SEMI {: return new Return(e); :} ; //| RETURN SUB expression.e SEMI {: return new Return(e); :} ;

parameterList =	INT idDecl.a {: return new List().add(a); :}
				| parameterList.a COMMA INT idDecl.b {: return a.add(b); :}
				;

functionList =
    function.f {: return new List().add(f); :}
    | functionList.list function.f {: return list.add(f); :} ;

function =
    INT idDecl.funcID LPAR RPAR block.block {: return new Function(funcID, new List(), block); :}
	| INT idDecl.funcID LPAR parameterList.list RPAR block.block {: return new Function(funcID, list, block); :}
	;


block = LBRACKET RBRACKET {: return new Block(new List()); :}
		| LBRACKET statementList.statement RBRACKET {: return new Block(statement); :}
		;

statementList =
	statement.statement {: return new List().add(statement); :}
	| statementList.statementList statement.statement {: return statementList.add(statement); :} ;

statement = declaration
			| assignment
			| if
			| while
			| return
			| functionCall
			;

if =
    IF LPAR expression.c RPAR block.block {: return new IfStatement(c, block, new Opt()); :}
	| IF LPAR expression.c RPAR block.block ELSE block.b {: return new IfStatement(c,block, new Opt(b)); :}
	;

while =
	WHILE LPAR expression.c RPAR block.block {: return new WhileStatement(c,block); :} ;

declaration = INT idDecl.id SEMI {: return new Declaration(id, new Opt()); :}
			  | INT idDecl.id ASSIGN expression.e SEMI {: return new Declaration(id, new Opt(e)); :} ;

assignment = idUse.id ASSIGN expression.e SEMI {: return new Assignment(id, e); :} ;

expression = comparison
			 | numericalExpression
			 ;
numericalExpression = add
			 		  | sub
			 		  | term
					  ;


add = numericalExpression.e ADD term.t {: return new Add(e, t); :} ;


sub = numericalExpression.e SUB term.t {: return new Sub(e, t); :} ;

term = mul
	   | div
	   | mod
	   | factor
	   ;

factor = idUse
		 | LPAR expression.e RPAR {: return e; :}
		 | functionUse
		 | integer
		 | SUB factor.b {: return new Sub(new IntegerValue("0"),b); :}
		 ;

mul = term.t MUL factor.f {: return new Mul(t, f); :} ;
div = term.t DIV factor.f {: return new Div(t, f); :} ;
mod = term.t MOD factor.f {: return new Mod(t, f); :} ;

comparison = eq
			 | neq
			 | lt
			 | gt
			 | leq
			 | geq
			 ;

eq = numericalExpression.a EQ numericalExpression.b {: return new Equal(a, b); :} ;
neq = numericalExpression.a NEQ numericalExpression.b{: return new NotEqual(a, b); :} ;
lt = numericalExpression.a LT numericalExpression.b {: return new LesserThan(a, b); :} ;
gt = numericalExpression.a GT numericalExpression.b {: return new GreaterThan(a, b); :} ;
leq = numericalExpression.a LEQ numericalExpression.b {: return new LesserThanEqual(a, b); :} ;
geq = numericalExpression.a GEQ numericalExpression.b {: return new GreaterThanEqual(a, b); :} ;

functionUse =
    idUse.id LPAR argList.list RPAR {: return new FunctionUse(id, list); :}
    | idUse.id LPAR RPAR {: return new FunctionUse(id, new List()); :}
    ;

functionCall = functionUse.f SEMI {: return new FunctionCall(f); :};


integer = INTEGER.value {: return new IntegerValue(value); :} ;

argList =
    expression.e {:return new List().add(e); :}
    | argList.list COMMA expression.e {: return list.add(e); :}
    ;
