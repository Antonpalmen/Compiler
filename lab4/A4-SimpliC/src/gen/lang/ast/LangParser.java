package lang.ast;
import beaver.*;
import java.util.ArrayList;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.zip.DeflaterOutputStream;

// This is a parser generated by NeoBeaver.
public class LangParser extends beaver.Parser {
  
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

  public static class Terminals {
    public static final short EOF = 0;
    public static final short RPAR = 1;
    public static final short ID = 2;
    public static final short COMMA = 3;
    public static final short SEMI = 4;
    public static final short INT = 5;
    public static final short SUB = 6;
    public static final short LPAR = 7;
    public static final short ADD = 8;
    public static final short RETURN = 9;
    public static final short GEQ = 10;
    public static final short LT = 11;
    public static final short IF = 12;
    public static final short LEQ = 13;
    public static final short EQ = 14;
    public static final short RBRACKET = 15;
    public static final short GT = 16;
    public static final short NEQ = 17;
    public static final short WHILE = 18;
    public static final short INTEGER = 19;
    public static final short DIV = 20;
    public static final short MOD = 21;
    public static final short MUL = 22;
    public static final short LBRACKET = 23;
    public static final short ASSIGN = 24;
    public static final short ELSE = 25;
    public static final short PRINT = 26;
    public static final short BOOLEAN = 27;

    public static final String[] NAMES = {
        "EOF",
        "RPAR",
        "ID",
        "COMMA",
        "SEMI",
        "INT",
        "SUB",
        "LPAR",
        "ADD",
        "RETURN",
        "GEQ",
        "LT",
        "IF",
        "LEQ",
        "EQ",
        "RBRACKET",
        "GT",
        "NEQ",
        "WHILE",
        "INTEGER",
        "DIV",
        "MOD",
        "MUL",
        "LBRACKET",
        "ASSIGN",
        "ELSE",
        "PRINT",
        "BOOLEAN",
    };
  }

  private final Action[] actions = {
    new Action() { // [0] program = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new Program(new List());
      }
    },
    new Action() { // [1] program =  functionList
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List list = (List) _symbols[offset + 1].value;
        return new Program(list);
      }
    },
    new Action() { // [2] functionList =  function
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Function f = (Function) _symbols[offset + 1].value;
        return new List().add(f);
      }
    },
    new Action() { // [3] functionList =  functionList function
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List list = (List) _symbols[offset + 1].value;
        final Function f = (Function) _symbols[offset + 2].value;
        return list.add(f);
      }
    },
    new Action() { // [4] idDecl =  ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        return new IdDecl(id);
      }
    },
    new Action() { // [5] GOAL =  program EOF
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Program program = (Program) _symbols[offset + 1].value;
        final Symbol sym2 = _symbols[offset + 2];
        return program;
      }
    },
    new Action() { // [6] function =  INT idDecl LPAR RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl funcID = (IdDecl) _symbols[offset + 2].value;
        final Symbol LPAR = _symbols[offset + 3];
        final Symbol RPAR = _symbols[offset + 4];
        final Block block = (Block) _symbols[offset + 5].value;
        return new Function(funcID, new List(), block);
      }
    },
    new Action() { // [7] parameterList =  INT idDecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl a = (IdDecl) _symbols[offset + 2].value;
        return new List().add(a);
      }
    },
    Action.RETURN, // [8] statement =  return (default action: return symbol 1)
    new Action() { // [9] statementList =  statement
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Statement statement = (Statement) _symbols[offset + 1].value;
        return new List().add(statement);
      }
    },
    new Action() { // [10] block =  LBRACKET RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACKET = _symbols[offset + 1];
        final Symbol RBRACKET = _symbols[offset + 2];
        return new Block(new List());
      }
    },
    new Action() { // [11] idUse =  ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        return new IdUse(id);
      }
    },
    new Action() { // [12] function =  INT idDecl LPAR parameterList RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl funcID = (IdDecl) _symbols[offset + 2].value;
        final Symbol LPAR = _symbols[offset + 3];
        final List list = (List) _symbols[offset + 4].value;
        final Symbol RPAR = _symbols[offset + 5];
        final Block block = (Block) _symbols[offset + 6].value;
        return new Function(funcID, list, block);
      }
    },
    Action.RETURN, // [13] numericalExpression =  add (default action: return symbol 1)
    Action.RETURN, // [14] comparison =  eq (default action: return symbol 1)
    Action.RETURN, // [15] term =  mul (default action: return symbol 1)
    Action.RETURN, // [16] expression =  numericalExpression (default action: return symbol 1)
    Action.RETURN, // [17] factor =  functionUse (default action: return symbol 1)
    new Action() { // [18] integer =  INTEGER
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol value = _symbols[offset + 1];
        return new IntegerValue(value);
      }
    },
    new Action() { // [19] functionCall =  functionUse SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final FunctionUse f = (FunctionUse) _symbols[offset + 1].value;
        final Symbol SEMI = _symbols[offset + 2];
        return new FunctionCall(f);
      }
    },
    new Action() { // [20] statementList =  statementList statement
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List statementList = (List) _symbols[offset + 1].value;
        final Statement statement = (Statement) _symbols[offset + 2].value;
        return statementList.add(statement);
      }
    },
    new Action() { // [21] block =  LBRACKET statementList RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACKET = _symbols[offset + 1];
        final List statement = (List) _symbols[offset + 2].value;
        final Symbol RBRACKET = _symbols[offset + 3];
        return new Block(statement);
      }
    },
    new Action() { // [22] parameterList =  parameterList COMMA INT idDecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        final Symbol COMMA = _symbols[offset + 2];
        final Symbol INT = _symbols[offset + 3];
        final IdDecl b = (IdDecl) _symbols[offset + 4].value;
        return a.add(b);
      }
    },
    new Action() { // [23] return =  RETURN expression SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol RETURN = _symbols[offset + 1];
        final Expression e = (Expression) _symbols[offset + 2].value;
        final Symbol SEMI = _symbols[offset + 3];
        return new Return(e);
      }
    },
    new Action() { // [24] declaration =  INT idDecl SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl id = (IdDecl) _symbols[offset + 2].value;
        final Symbol SEMI = _symbols[offset + 3];
        return new Declaration(id, new Opt());
      }
    },
    new Action() { // [25] functionUse =  idUse LPAR RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse id = (IdUse) _symbols[offset + 1].value;
        final Symbol LPAR = _symbols[offset + 2];
        final Symbol RPAR = _symbols[offset + 3];
        return new FunctionUse(id, new List());
      }
    },
    new Action() { // [26] argList =  expression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression e = (Expression) _symbols[offset + 1].value;
        return new List().add(e);
      }
    },
    new Action() { // [27] factor =  LPAR expression RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LPAR = _symbols[offset + 1];
        final Expression e = (Expression) _symbols[offset + 2].value;
        final Symbol RPAR = _symbols[offset + 3];
        return e;
      }
    },
    new Action() { // [28] gt =  numericalExpression GT numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol GT = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new GreaterThan(a, b);
      }
    },
    new Action() { // [29] add =  numericalExpression ADD term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression e = (Expression) _symbols[offset + 1].value;
        final Symbol ADD = _symbols[offset + 2];
        final Expression t = (Expression) _symbols[offset + 3].value;
        return new Add(e, t);
      }
    },
    new Action() { // [30] geq =  numericalExpression GEQ numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol GEQ = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new GreaterThanEqual(a, b);
      }
    },
    new Action() { // [31] lt =  numericalExpression LT numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol LT = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new LesserThan(a, b);
      }
    },
    new Action() { // [32] leq =  numericalExpression LEQ numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol LEQ = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new LesserThanEqual(a, b);
      }
    },
    new Action() { // [33] sub =  numericalExpression SUB term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression e = (Expression) _symbols[offset + 1].value;
        final Symbol SUB = _symbols[offset + 2];
        final Expression t = (Expression) _symbols[offset + 3].value;
        return new Sub(e, t);
      }
    },
    new Action() { // [34] neq =  numericalExpression NEQ numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol NEQ = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new NotEqual(a, b);
      }
    },
    new Action() { // [35] eq =  numericalExpression EQ numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol EQ = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new Equal(a, b);
      }
    },
    new Action() { // [36] div =  term DIV factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression t = (Expression) _symbols[offset + 1].value;
        final Symbol DIV = _symbols[offset + 2];
        final Expression f = (Expression) _symbols[offset + 3].value;
        return new Div(t, f);
      }
    },
    new Action() { // [37] mod =  term MOD factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression t = (Expression) _symbols[offset + 1].value;
        final Symbol MOD = _symbols[offset + 2];
        final Expression f = (Expression) _symbols[offset + 3].value;
        return new Mod(t, f);
      }
    },
    new Action() { // [38] mul =  term MUL factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression t = (Expression) _symbols[offset + 1].value;
        final Symbol MUL = _symbols[offset + 2];
        final Expression f = (Expression) _symbols[offset + 3].value;
        return new Mul(t, f);
      }
    },
    new Action() { // [39] return =  RETURN SUB expression SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol RETURN = _symbols[offset + 1];
        final Symbol SUB = _symbols[offset + 2];
        final Expression e = (Expression) _symbols[offset + 3].value;
        final Symbol SEMI = _symbols[offset + 4];
        return new Return(e);
      }
    },
    new Action() { // [40] assignment =  idUse ASSIGN expression SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse id = (IdUse) _symbols[offset + 1].value;
        final Symbol ASSIGN = _symbols[offset + 2];
        final Expression e = (Expression) _symbols[offset + 3].value;
        final Symbol SEMI = _symbols[offset + 4];
        return new Assignment(id, e);
      }
    },
    new Action() { // [41] functionUse =  idUse LPAR argList RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse id = (IdUse) _symbols[offset + 1].value;
        final Symbol LPAR = _symbols[offset + 2];
        final List list = (List) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        return new FunctionUse(id, list);
      }
    },
    new Action() { // [42] declaration =  INT idDecl ASSIGN expression SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl id = (IdDecl) _symbols[offset + 2].value;
        final Symbol ASSIGN = _symbols[offset + 3];
        final Expression e = (Expression) _symbols[offset + 4].value;
        final Symbol SEMI = _symbols[offset + 5];
        return new Declaration(id, new Opt(e));
      }
    },
    new Action() { // [43] if =  IF LPAR expression RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expression c = (Expression) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Block block = (Block) _symbols[offset + 5].value;
        return new IfStatement(c, block, new Opt());
      }
    },
    new Action() { // [44] argList =  argList COMMA expression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List list = (List) _symbols[offset + 1].value;
        final Symbol COMMA = _symbols[offset + 2];
        final Expression e = (Expression) _symbols[offset + 3].value;
        return list.add(e);
      }
    },
    new Action() { // [45] while =  WHILE LPAR expression RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol WHILE = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expression c = (Expression) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Block block = (Block) _symbols[offset + 5].value;
        return new WhileStatement(c,block);
      }
    },
    new Action() { // [46] if =  IF LPAR expression RPAR block ELSE block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expression c = (Expression) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Block block = (Block) _symbols[offset + 5].value;
        final Symbol ELSE = _symbols[offset + 6];
        final Block b = (Block) _symbols[offset + 7].value;
        return new IfStatement(c,block, new Opt(b));
      }
    },
  };

  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9pjcrbiL5KOn$#TwTvYsJTR2cqfT2#b2vHDH0K1GGLHGK51GH4G8T4O7p2Q#E3sOg8FQeo" +
    "QcEYB3pver2TDZ16ZiYYo28Wi2Ye2YihYzN$kkNFFFNDdviuzKmURz6j#$$Dzzvplh7VkJ3" +
    "i0bAwtBEGXt$eA1OWYWbnSXchqGtzCmGXKO1QQqObLc8GDs8XDzZNRh7$ichjO4yLGZCGmZ" +
    "CPWZ6BLS58UTsswtVfkjYwqlLPwuz64EhIW0UqOYteqOY9gqOOkJ4P7NAlRK1IOTrM2l3ki" +
    "Yt2CNb0FDzWzoDONtBmBWNcBLHwA0rlVv6djcdLU8DJsu$jOPlUXjNQySvIW4MzEC6A9KvR" +
    "Ybi3yMptvPRxMjzkjuwykrsUSuDnN9CoxCovl01deQxKohfNFhByzNj3wrdZMLsNh42SQPE" +
    "lbjbRQEYR9U7$P18rql#yaobAj8eNL6EPLEMKtnYLfCI7HHUjFfNgar$Yiq6YMnkCPvvrLg" +
    "aTwZS#c1YwbH#U9QMRZfRYlPzYQvBx6pC2UhqXqqVWS$f34L8$q6gtUT3#lJ78zmApV1J7L" +
    "evXwwzoyCtulBJDz7PqMIDKZfGdpJWc4XhGgrmltVFbD85MFbCfIUXdd6QxFEYaGYhda6Z8" +
    "RSwZNOZxrQinBacSwdkdwVXL8rIEbifIUcvVU$N8T5c1XZypp5u5KFL8gI#bbl9$g$CBbPV" +
    "brf9tVpFJF3zU77Id1U67kbom$9x0epVvlr4FhPwLwfDVupFHvTaAf7karlhpZafZgaLxZh" +
    "JVUpoM6cQRxyfCaj2qro15ckYzzUNrv8VAi7vNgaLxZizL9hWUPwJoFATKZlSPdznZCKTYz" +
    "PcdMKO5KFL8gI#cvUKSaeMqjkSyWRvr13iqwB92gHqfbAJqtxmU1KFVpPthZ7H98rIEbIFI" +
    "vxdk1q93Z7HG83PbtG20qPDv#WLGzKef4w$jE83JaUFi4GaFcxHL8rIEbifIUcxT785MFbC" +
    "fIUcxURe5KFL8gI#cvUTygrIEzncVhqzs9E3FyEvYrIwaUwJM#l6y4KlL8gIobvvhf#uhf#" +
    "hvMgaTwZIzlfr8zqciSUy3Dso49FS$jIlL8h$6PwRviKwf77ksolqjeHHwcOXfQ#3ETKIlA" +
    "KU7eA5JQrrj4PDa6k3LvFCisJ4GxEj39cacaE$wQsphYUgCnXlT9DMem5hMyJyQZ3lLeG2E" +
    "QqEnh1TCyop7ECwqUOkipp2i8qrePSaWKkQdwyBGUxdgSfyc8OZndTLD2hMzOajP1Cqvsxa" +
    "5vSby2MldD#FmYCiU9YcmjjRNCre59nainprGdWM6fLf5YVNc6UH6dp4T1aXQ3akSPx4iaa" +
    "tcQZfV5lDpWjVJeU4bExTADfvv5FJ8UmkPYH4RZcUwd#xmMhoGKiYn62RKVBgFsnm2xrM0C" +
    "mT3uvxNZXNe56x#EFFCaIUQPAY$aUEuyGpvVqffdR3zxCY$a#hAzdvTiNtfBdkb#ckPb$zo" +
    "3do#UFDFtesoVW#bp8isHuj#LCl$yagNFIncz$ndCCySiCxFdVEACL1RxVILqNaRdrvVNbn" +
    "ScBzk$FsHndgQllqloVcGwdbcUYVNSvwNUCbwsythB#lwddw#p$Jmp$JjOPd#lCzmNsmltt" +
    "Cts#Wm#GzgUwNFGT9x$sRu0sFoe#Ygad7IInMGZUPgyIZuc1ybv82U7j965P1rvWhnEtYIx" +
    "o5aWmduZpMGkMKqU8o#HzyasSXg85f5wCeUi90#J5ybxP3iv2UIMa5eoYwmWZv0No3laIt8" +
    "2o2iWrMG6MKOU8i#HjybMSXZ8Zv9AqasujlnDv5do5lcK72ByhQ9W9EaYYyW6yYHvWtn4zf" +
    "DpGE5GmlKNBY1h2TTV#1hvaEmXN7$H8D98vf4rv77o2lc0S8#ApW35PQI1p2Qho1R2zHU$I" +
    "tOGhh#acDIG9hASSFqbpvENoHVaE53AzPTMaJgoL9mb3$OpifNit4991ErpiflizLmxvPHx" +
    "HCckAfnuNuf#pYUhS#eFn7psDpbLsp2mhwKU$q6F$mpvX1prNEEzW5PoaVTd8Hb1VpvBxcr" +
    "E5vk8VrFD#nh3LKxEafwQQzn#7F6CyHIBemdQ77FclTdi6yrUQ2ts$qQOnbEOQXFXUULWCi" +
    "ikv64woqcCkqaB$GgMNSX73SiwKaqQoIXIIIQmJJTfuRlNTEIYWsMx$SrJ55FiTb4qa5eoZ" +
    "ZIHPZAMZ2VrP0of8gD91$je8#MadVFfjByHZ6AYxHTWnh$iJ6Pq");

  public LangParser() {
    super(PARSING_TABLES);
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
