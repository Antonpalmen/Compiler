package lang.ast;
import beaver.*;
import java.util.ArrayList;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.zip.DeflaterOutputStream;

// This is a parser generated by NeoBeaver.
public class LangParser extends beaver.Parser {
  
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

  public static class Terminals {
    public static final short EOF = 0;
    public static final short RPAR = 1;
    public static final short ID = 2;
    public static final short SEMI = 3;
    public static final short COMMA = 4;
    public static final short INT = 5;
    public static final short SUB = 6;
    public static final short ADD = 7;
    public static final short LPAR = 8;
    public static final short RETURN = 9;
    public static final short WHILE = 10;
    public static final short EQ = 11;
    public static final short RBRACKET = 12;
    public static final short LT = 13;
    public static final short NEQ = 14;
    public static final short LEQ = 15;
    public static final short GEQ = 16;
    public static final short IF = 17;
    public static final short GT = 18;
    public static final short INTEGER = 19;
    public static final short MUL = 20;
    public static final short DIV = 21;
    public static final short MOD = 22;
    public static final short LBRACKET = 23;
    public static final short ASSIGN = 24;
    public static final short ELSE = 25;
    public static final short BOOLEAN = 26;
    public static final short PRINT = 27;

    public static final String[] NAMES = {
        "EOF",
        "RPAR",
        "ID",
        "SEMI",
        "COMMA",
        "INT",
        "SUB",
        "ADD",
        "LPAR",
        "RETURN",
        "WHILE",
        "EQ",
        "RBRACKET",
        "LT",
        "NEQ",
        "LEQ",
        "GEQ",
        "IF",
        "GT",
        "INTEGER",
        "MUL",
        "DIV",
        "MOD",
        "LBRACKET",
        "ASSIGN",
        "ELSE",
        "BOOLEAN",
        "PRINT",
    };
  }

  private final Action[] actions = {
    new Action() { // [0] program = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new Program(new List());
      }
    },
    new Action() { // [1] program =  functionList
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List list = (List) _symbols[offset + 1].value;
        return new Program(list);
      }
    },
    new Action() { // [2] functionList =  function
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Function f = (Function) _symbols[offset + 1].value;
        return new List().add(f);
      }
    },
    new Action() { // [3] functionList =  functionList function
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List list = (List) _symbols[offset + 1].value;
        final Function f = (Function) _symbols[offset + 2].value;
        return list.add(f);
      }
    },
    new Action() { // [4] GOAL =  program EOF
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Program program = (Program) _symbols[offset + 1].value;
        final Symbol sym2 = _symbols[offset + 2];
        return program;
      }
    },
    new Action() { // [5] idDecl =  ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        return new IdDecl(id);
      }
    },
    new Action() { // [6] parameterList =  INT idDecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl a = (IdDecl) _symbols[offset + 2].value;
        return new List().add(a);
      }
    },
    new Action() { // [7] function =  INT idDecl LPAR RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl funcID = (IdDecl) _symbols[offset + 2].value;
        final Symbol LPAR = _symbols[offset + 3];
        final Symbol RPAR = _symbols[offset + 4];
        final Block block = (Block) _symbols[offset + 5].value;
        return new Function(funcID, new List(), block);
      }
    },
    new Action() { // [8] function =  INT idDecl LPAR parameterList RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl funcID = (IdDecl) _symbols[offset + 2].value;
        final Symbol LPAR = _symbols[offset + 3];
        final List list = (List) _symbols[offset + 4].value;
        final Symbol RPAR = _symbols[offset + 5];
        final Block block = (Block) _symbols[offset + 6].value;
        return new Function(funcID, list, block);
      }
    },
    Action.RETURN, // [9] statement =  declaration (default action: return symbol 1)
    new Action() { // [10] statementList =  statement
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Statement statement = (Statement) _symbols[offset + 1].value;
        return new List().add(statement);
      }
    },
    new Action() { // [11] block =  LBRACKET RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACKET = _symbols[offset + 1];
        final Symbol RBRACKET = _symbols[offset + 2];
        return new Block(new List());
      }
    },
    new Action() { // [12] idUse =  ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        return new IdUse(id);
      }
    },
    new Action() { // [13] parameterList =  parameterList COMMA INT idDecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        final Symbol COMMA = _symbols[offset + 2];
        final Symbol INT = _symbols[offset + 3];
        final IdDecl b = (IdDecl) _symbols[offset + 4].value;
        return a.add(b);
      }
    },
    new Action() { // [14] statementList =  statementList statement
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List statementList = (List) _symbols[offset + 1].value;
        final Statement statement = (Statement) _symbols[offset + 2].value;
        return statementList.add(statement);
      }
    },
    new Action() { // [15] block =  LBRACKET statementList RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACKET = _symbols[offset + 1];
        final List statement = (List) _symbols[offset + 2].value;
        final Symbol RBRACKET = _symbols[offset + 3];
        return new Block(statement);
      }
    },
    Action.RETURN, // [16] comparison =  neq (default action: return symbol 1)
    Action.RETURN, // [17] term =  factor (default action: return symbol 1)
    Action.RETURN, // [18] numericalExpression =  term (default action: return symbol 1)
    Action.RETURN, // [19] factor =  integer (default action: return symbol 1)
    Action.RETURN, // [20] expression =  comparison (default action: return symbol 1)
    new Action() { // [21] integer =  INTEGER
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol value = _symbols[offset + 1];
        return new IntegerValue(value);
      }
    },
    new Action() { // [22] functionCall =  functionUse SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final FunctionUse f = (FunctionUse) _symbols[offset + 1].value;
        final Symbol SEMI = _symbols[offset + 2];
        return new FunctionCall(f);
      }
    },
    new Action() { // [23] return =  RETURN expression SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol RETURN = _symbols[offset + 1];
        final Expression e = (Expression) _symbols[offset + 2].value;
        final Symbol SEMI = _symbols[offset + 3];
        return new Return(e);
      }
    },
    new Action() { // [24] declaration =  INT idDecl SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl id = (IdDecl) _symbols[offset + 2].value;
        final Symbol SEMI = _symbols[offset + 3];
        return new Declaration(id, new Opt());
      }
    },
    new Action() { // [25] argList =  expression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression e = (Expression) _symbols[offset + 1].value;
        return new List().add(e);
      }
    },
    new Action() { // [26] functionUse =  idUse LPAR RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse id = (IdUse) _symbols[offset + 1].value;
        final Symbol LPAR = _symbols[offset + 2];
        final Symbol RPAR = _symbols[offset + 3];
        return new FunctionUse(id, new List());
      }
    },
    new Action() { // [27] mod =  term MOD factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression t = (Expression) _symbols[offset + 1].value;
        final Symbol MOD = _symbols[offset + 2];
        final Expression f = (Expression) _symbols[offset + 3].value;
        return new Mod(t, f);
      }
    },
    new Action() { // [28] div =  term DIV factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression t = (Expression) _symbols[offset + 1].value;
        final Symbol DIV = _symbols[offset + 2];
        final Expression f = (Expression) _symbols[offset + 3].value;
        return new Div(t, f);
      }
    },
    new Action() { // [29] mul =  term MUL factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression t = (Expression) _symbols[offset + 1].value;
        final Symbol MUL = _symbols[offset + 2];
        final Expression f = (Expression) _symbols[offset + 3].value;
        return new Mul(t, f);
      }
    },
    new Action() { // [30] factor =  LPAR expression RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LPAR = _symbols[offset + 1];
        final Expression e = (Expression) _symbols[offset + 2].value;
        final Symbol RPAR = _symbols[offset + 3];
        return e;
      }
    },
    new Action() { // [31] return =  RETURN SUB expression SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol RETURN = _symbols[offset + 1];
        final Symbol SUB = _symbols[offset + 2];
        final Expression e = (Expression) _symbols[offset + 3].value;
        final Symbol SEMI = _symbols[offset + 4];
        return new Return(e);
      }
    },
    new Action() { // [32] lt =  numericalExpression LT numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol LT = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new LesserThan(a, b);
      }
    },
    new Action() { // [33] geq =  numericalExpression GEQ numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol GEQ = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new GreaterThanEqual(a, b);
      }
    },
    new Action() { // [34] eq =  numericalExpression EQ numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol EQ = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new Equal(a, b);
      }
    },
    new Action() { // [35] sub =  numericalExpression SUB term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression e = (Expression) _symbols[offset + 1].value;
        final Symbol SUB = _symbols[offset + 2];
        final Expression t = (Expression) _symbols[offset + 3].value;
        return new Sub(e, t);
      }
    },
    new Action() { // [36] neq =  numericalExpression NEQ numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol NEQ = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new NotEqual(a, b);
      }
    },
    new Action() { // [37] leq =  numericalExpression LEQ numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol LEQ = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new LesserThanEqual(a, b);
      }
    },
    new Action() { // [38] gt =  numericalExpression GT numericalExpression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression a = (Expression) _symbols[offset + 1].value;
        final Symbol GT = _symbols[offset + 2];
        final Expression b = (Expression) _symbols[offset + 3].value;
        return new GreaterThan(a, b);
      }
    },
    new Action() { // [39] add =  numericalExpression ADD term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expression e = (Expression) _symbols[offset + 1].value;
        final Symbol ADD = _symbols[offset + 2];
        final Expression t = (Expression) _symbols[offset + 3].value;
        return new Add(e, t);
      }
    },
    new Action() { // [40] functionUse =  idUse LPAR argList RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse id = (IdUse) _symbols[offset + 1].value;
        final Symbol LPAR = _symbols[offset + 2];
        final List list = (List) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        return new FunctionUse(id, list);
      }
    },
    new Action() { // [41] assignment =  idUse ASSIGN expression SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse id = (IdUse) _symbols[offset + 1].value;
        final Symbol ASSIGN = _symbols[offset + 2];
        final Expression e = (Expression) _symbols[offset + 3].value;
        final Symbol SEMI = _symbols[offset + 4];
        return new Assignment(id, e);
      }
    },
    new Action() { // [42] if =  IF LPAR expression RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expression c = (Expression) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Block block = (Block) _symbols[offset + 5].value;
        return new IfStatement(c, block, new Opt());
      }
    },
    new Action() { // [43] declaration =  INT idDecl ASSIGN expression SEMI
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl id = (IdDecl) _symbols[offset + 2].value;
        final Symbol ASSIGN = _symbols[offset + 3];
        final Expression e = (Expression) _symbols[offset + 4].value;
        final Symbol SEMI = _symbols[offset + 5];
        return new Declaration(id, new Opt(e));
      }
    },
    new Action() { // [44] while =  WHILE LPAR expression RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol WHILE = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expression c = (Expression) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Block block = (Block) _symbols[offset + 5].value;
        return new WhileStatement(c,block);
      }
    },
    new Action() { // [45] argList =  argList COMMA expression
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List list = (List) _symbols[offset + 1].value;
        final Symbol COMMA = _symbols[offset + 2];
        final Expression e = (Expression) _symbols[offset + 3].value;
        return list.add(e);
      }
    },
    new Action() { // [46] if =  IF LPAR expression RPAR block ELSE block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expression c = (Expression) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Block block = (Block) _symbols[offset + 5].value;
        final Symbol ELSE = _symbols[offset + 6];
        final Block b = (Block) _symbols[offset + 7].value;
        return new IfStatement(c,block, new Opt(b));
      }
    },
  };

  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9pjccji55KKn$$RzujNUHIGja0BBHJQKjf2AMyHHHH5L1HKL10K0K4IJJG6euaVZCRuoGz" +
    "6OpGQ4pzeDD743yR4g1zCb8VoL5HKK51HK9I7ZlypktVkdNtCxjnjLvfmoE$SSywT$znxvy" +
    "xExh85AZOu3WfHX5AKem03CGX3dEqOXpd8mqRaenPZC0qpi19JSG$k1TmApVdNhT$4UW6YL" +
    "eqHgCD5gC9mr3CVQbJ6knMnObVNHDraJ44p9c4cMj66JdHW5jhHZTcOW8dkKJVpA6KbWRe5" +
    "Ffq#QhNpZpe1ew0pNEQT8NhqEKztBb1tUPpkRE3HrwMOvphd3BLdnBjdEPDmbblTiy3hLrP" +
    "6WaQytZy$p$h5sWei3zJV6ASVuFh#2PhRN4ryzNPlredxjoQfuWvpdRJAX2FMnXsHt0O7hk" +
    "hE55SbsNYcRdCgdNDQ#p3c$9qOPMHZNJygber43VrehtTOIbr9g54yS$vAZ3AoPFDiy7fJp" +
    "xCnr2YUEQUqbrOYbPbHWkvFxQMLI6Lcr5FZnQuBC9sq93sYgqV7izrts$7cses7UMdwvoSl" +
    "Etz4KLvQNJFhSVd5TjDqJWhAIwjhggxxeltkCRRtfwtkXFQXrlUxzj9Af38pIj3z5aLvQNN" +
    "DhCVbOurIcDV3SK5yEBFM$IfeRzPKNMK#tI#2zcPDrLcw50jnIO#CPwcpteVCrfVhwvauti" +
    "#2zcPDrLNc4ovAUYtIclLzTamG7rBdNzyyinQuFjjzFofeRzPKNMK1y$JLWkRP0zTp2Qw95" +
    "QyaYt4LhiOLZ9OcrUNu#O9b6HzvhI#pt3$SOAcqlLz#qbvQYLHcHWcs8cLFiDbUbrphRabQ" +
    "JMlEZzfBAv7Ap2Z1LjcDrsUkvmLTyjVV4UsbbKXbPjHZyxmhvHa3pJciVIYxs$NhGu$tWw2" +
    "zMLDrbVc46qBFC6gLTZBdUq5xiwRgAlFflXEqDskghZAVxf2WlLbJTPNvTDyAsfirLLUPJ$" +
    "UDzj9Af38pIhWkNmlYZVVt3CmvA8WFgVjA41zIzwMWlLbJTIJx7d1041zolFs2#92wVOBua" +
    "BgzWlPcJTMHP7tObFaOFhDy7La$F$S8sfirLLUPJxTRUsabKfaP9OptXVRIIgGoCuhP5g$d" +
    "S#sbbKXbPfGmtYxjfPL8PMQKeDkfVIYpVGxkq5vQYLGMYwRmNojceP2#XV#wsBPY9gFP68L" +
    "gbnhKIf$ZIERG0AzUwBY6Dan5EphGYMcOpdn6V2LEDnfZU7VLeHxZC1uDQ7J$lxW9ap0PpU" +
    "ee9sR82wVpZe9tXiBCpg3cQQkpd6U4sdmKnCvIalmitfo6Ur59T4yodP#dYtYhwmwrFbU7W" +
    "XIQbBDEkN#1wwIkAjqHoItShgKVBwqkTbtIpIj1PzndeNHvfWQbAAEly7e71Ul2MyxdMH9s" +
    "XbcEzx$es1QbMYi6zyPuOItd#vT6fvzySNM4dIj6k3xVSfxUynf5A8xE6kMa7$fZ00OogYH" +
    "3C1J3VC$hNDzdjiybs$5izy6uFqEz7dplcvbRzZhPzrWjvRxtGLtM#n0qNgwlPm#Eb$Lp8j" +
    "UwJ9vBXgvNzxqtxkjmbltzOZjUI5t6zvd$dT1#$#oKrkDbzJuMthARPmvrMQtFudhQFi$wo" +
    "lMyeEkrxmyvkQzjFxTceSlfvu8gIrrV#HoPrUTFk$U7#F4oiVD1PtizSprFMzrv#JhAzUVT" +
    "d7plZtwNpjruXixskPlL$gMU9u2j3#kVGUJlgkKlYEKNkita2V8g#O38xsndWKWLQIDTP1t" +
    "PGbuYxvFzv1IGDuGqamLaBNc4F4$U9Rl92I2$FwadSyaQyX1vbhnDTfBZG44PQIJpoIho87" +
    "c6l4K#8yU0mY9IH#QGbUH#yZHvdNn2ZW15UQIMT9FbP2jvYhn6FYI7Y0CKZoITP1dPH1udh" +
    "n2kl$WWEGsK32DSVyaIifuyHbuaxn6kluJhBwqaBMGnuJKgVPGyHrucUyX9e6m0QI8BoMgo" +
    "ZN3zPU#GNOJhBoyd3MGUMKGU85n$#PlaKt8KgE3wAxZ#YWbaXUmbDtOxsR4jkicxf8s7zd6" +
    "itKtsnk9zHlz9iZyMdulNSvZgMD#1PETF1NLT0NqhCj3VbwR$IV8HEMoiHVxUFa9Quuvz8r" +
    "gEy3hBt#n5HX3Uav4EvYz4ZuaiJJOExM2OTSTf3$Ey6mFwZyJcjzNkrym#QF8hAaW4Crtoq" +
    "4LQ6SzYEmM5f0ZJcCyWBUxlPD9Nm3oFUJuQcDUHUb939f9QqiR#TlPtacxcrMp7aD5aBAaX" +
    "xJpF9BRDP08PJoQJ9j98nf5g7jD1fdCkdMIg#vjWFlDYpFaFNdXdd0==");

  public LangParser() {
    super(PARSING_TABLES);
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
