/**
 * Simple code generation for the Calc language (EDAN65 course labs).
 * @author Jesper Ã–qvist
 */
aspect CodeGen {

  public void Program.genCode(PrintStream out) {
      out.println(".global _start");
      out.println(".data");
      out.println("buf: .skip 1024");
      out.println();
      out.println(".text");
      out.println("_start:");
      out.println();
      out.println("call main");

      // Call sys_exit:
      out.println("        movq $0, %rdi");
      out.println("        movq $60, %rax");
      out.println("        syscall"); // Done!
      out.println();

      for(Function f: getFunctionList()){
        f.genCode(out);
      }

    // Helper procedures for input/output:
    out.println("# Procedure to print number to stdout.");
    out.println("# C signature: void print(long int)");
    out.println("print:");
    out.println("        pushq %rbp");
    out.println("        movq %rsp, %rbp");
    out.println("        ### Convert integer to string (itoa).");
    out.println("        movq 16(%rbp), %rax");
    out.println("        leaq buf(%rip), %rsi    # RSI = write pointer (starts at end of buffer)");
    out.println("        addq $1023, %rsi");
    out.println("        movb $0x0A, (%rsi)      # insert newline");
    out.println("        movq $1, %rcx           # RCX = string length");
    out.println("        cmpq $0, %rax");
    out.println("        jge itoa_loop");
    out.println("        negq %rax               # negate to make RAX positive");
    out.println("itoa_loop:                      # do.. while (at least one iteration)");
    out.println("        movq $10, %rdi");
    out.println("        movq $0, %rdx");
    out.println("        idivq %rdi              # divide RDX:RAX by 10");
    out.println("        addb $0x30, %dl         # remainder + '0'");
    out.println("        decq %rsi               # move string pointer");
    out.println("        movb %dl, (%rsi)");
    out.println("        incq %rcx               # increment string length");
    out.println("        cmpq $0, %rax");
    out.println("        jg itoa_loop            # produce more digits");
    out.println("itoa_done:");
    out.println("        movq 16(%rbp), %rax");
    out.println("        cmpq $0, %rax");
    out.println("        jge print_end");
    out.println("        decq %rsi");
    out.println("        incq %rcx");
    out.println("        movb $0x2D, (%rsi)");
    out.println("print_end:");
    out.println("        movq $1, %rdi");
    out.println("        movq %rcx, %rdx");
    out.println("        movq $1, %rax");
    out.println("        syscall");
    out.println("        popq %rbp");
    out.println("        ret");
    out.println("");
    out.println("# Procedure to read number from stdin.");
    out.println("# C signature: long long int read(void)");
    out.println("read:");
    out.println("        pushq %rbp");
    out.println("        movq %rsp, %rbp");
    out.println("        ### R9  = sign");
    out.println("        movq $1, %r9            # sign <- 1");
    out.println("        ### R10 = sum");
    out.println("        movq $0, %r10           # sum <- 0");
    out.println("skip_ws: # skip any leading whitespace");
    out.println("        movq $0, %rdi");
    out.println("        leaq buf(%rip), %rsi");
    out.println("        movq $1, %rdx");
    out.println("        movq $0, %rax");
    out.println("        syscall                 # get one char: sys_read(0, buf, 1)");
    out.println("        cmpq $0, %rax");
    out.println("        jle atoi_done           # nchar <= 0");
    out.println("        movb (%rsi), %cl        # c <- current char");
    out.println("        cmp $32, %cl");
    out.println("        je skip_ws              # c == space");
    out.println("        cmp $13, %cl");
    out.println("        je skip_ws              # c == CR");
    out.println("        cmp $10, %cl");
    out.println("        je skip_ws              # c == NL");
    out.println("        cmp $9, %cl");
    out.println("        je skip_ws              # c == tab");
    out.println("        cmp $45, %cl            # check if negative");
    out.println("        jne atoi_loop");
    out.println("        movq $-1, %r9           # sign <- -1");
    out.println("        movq $0, %rdi");
    out.println("        leaq buf(%rip), %rsi");
    out.println("        movq $1, %rdx");
    out.println("        movq $0, %rax");
    out.println("        syscall                 # get one char: sys_read(0, buf, 1)");
    out.println("atoi_loop:");
    out.println("        cmpq $0, %rax           # while (nchar > 0)");
    out.println("        jle atoi_done           # leave loop if nchar <= 0");
    out.println("        movzbq (%rsi), %rcx     # move byte, zero extend to quad-word");
    out.println("        cmpq $0x30, %rcx        # test if < '0'");
    out.println("        jl atoi_done            # character is not numeric");
    out.println("        cmpq $0x39, %rcx        # test if > '9'");
    out.println("        jg atoi_done            # character is not numeric");
    out.println("        imulq $10, %r10         # multiply sum by 10");
    out.println("        subq $0x30, %rcx        # value of character");
    out.println("        addq %rcx, %r10         # add to sum");
    out.println("        movq $0, %rdi");
    out.println("        leaq buf(%rip), %rsi");
    out.println("        movq $1, %rdx");
    out.println("        movq $0, %rax");
    out.println("        syscall                 # get one char: sys_read(0, buf, 1)");
    out.println("        jmp atoi_loop           # loop back");
    out.println("atoi_done:");
    out.println("        imulq %r9, %r10         # sum *= sign");
    out.println("        movq %r10, %rax         # put result value in RAX");
    out.println("        popq %rbp");
    out.println("        ret");
    out.println();
    out.println("print_string:");
    out.println("        pushq %rbp");
    out.println("        movq %rsp, %rbp");
    out.println("        movq $1, %rdi");
    out.println("        movq 16(%rbp), %rsi");
    out.println("        movq 24(%rbp), %rdx");
    out.println("        movq $1, %rax");
    out.println("        syscall");
    out.println("        popq %rbp");
    out.println("        ret");
  }

  /**
   * Generate code to evaluate the expression and
   * store the result in RAX.
   *
   * This must be implemented for every subclass of Expr!
   */
   public void Function.genCode(PrintStream out){
     out.println(getIdDecl().getID() +":");
     out.println("        pushq %rbp");
     out.println("        movq %rsp, %rbp");
     out.println("        subq $"+(numLocals() * 8)+", %rsp");
     getBlock().genCode(out);
   }

   public void FunctionCall.genCode(PrintStream out){
     getFunctionUse().genCode(out);
   }

   public void FunctionUse.genCode(PrintStream out){
     for (int i = (getNumParameter() - 1); i >= 0; i--) {
       getParameter(i).genCode(out);
       out.println("        pushq %rax");
     }
     out.println("call " + getIdUse().getID());
     out.println("        addq $" + (getNumParameter() * 8) + ", %rsp");
   }

   public void Block.genCode(PrintStream out){
     for(Statement s: getStatements()){
       s.genCode(out);
     }
   }

   abstract void Statement.genCode(PrintStream out);

   public void IfStatement.genCode(PrintStream out){
     if(hasElse()) {
       String elselabel = enclosingFunction().getIdDecl().getID() + "_else_" + getThen().uniquePrefix();
       String iflabel = enclosingFunction().getIdDecl().getID() + "_if_end_" + getThen().uniquePrefix();
       getCondition().genConditionalJump(out, elselabel);
       getThen().genCode(out);
       out.println("\t jmp " + iflabel);
       out.println(elselabel + ":");
       getElse().genCode(out);
       out.println(iflabel + ":");
     } else {
       String iflabel = enclosingFunction().getIdDecl().getID() + "_if_end_" + getThen().uniquePrefix();
       getCondition().genConditionalJump(out, iflabel);
       getThen().genCode(out);
       out.println(iflabel + ":");
     }
   }

   public void WhileStatement.genCode(PrintStream out){
    String startLabel = enclosingFunction().getIdDecl().getID() + "_while_start_" + getThen().uniquePrefix();
    out.println(startLabel + ":");
    String label = enclosingFunction().getIdDecl().getID() + "_while_end_" + getThen().uniquePrefix();
    getCondition().genConditionalJump(out, label);
    getThen().genCode(out);
    out.println("        jmp " + startLabel);
    out.println(label + ":");
  }

  public void Return.genCode(PrintStream out){
    getExpression().genCode(out);
    out.println("        movq %rbp, %rsp");
    out.println("        popq %rbp");
    out.println("        ret");
  }

  abstract void Expression.genCode(PrintStream out);

  public void Expression.genConditionalJump(PrintStream out, String label) {}

  public void Add.genCode(PrintStream out){
    geta().genCode(out);
    out.println("        pushq %rax");
    getb().genCode(out);
    out.println("        movq %rax, %rbx");
    out.println("        popq %rax");
    out.println("        addq %rbx, %rax");
  }

  public void Sub.genCode(PrintStream out){
    geta().genCode(out);
    out.println("        pushq %rax");
    getb().genCode(out);
    out.println("        movq %rax, %rbx");
    out.println("        popq %rax");
    out.println("        subq %rbx, %rax");
  }

  public void Div.genCode(PrintStream out) {
    geta().genCode(out);
    out.println("        pushq %rax");
    getb().genCode(out);
    out.println("        movq %rax, %rbx");
    out.println("        popq %rax");
    out.println("        movq $0, %rdx");// NB: clear RDX to prepare division RDX:RAX / RBX
    out.println("        idivq %rbx");
  }

  public void Mul.genCode(PrintStream out) {
    geta().genCode(out);
    out.println("        pushq %rax");
    getb().genCode(out);
    out.println("        movq %rax, %rbx");
    out.println("        popq %rax");
    out.println("        imulq %rbx, %rax");
  }

  public void Mod.genCode(PrintStream out){
    geta().genCode(out);
    out.println("        pushq %rax");
    getb().genCode(out);
    out.println("        movq %rax, %rbx");
    out.println("        popq %rax");
    out.println("        movq $0, %rdx");
    out.println("        idivq %rbx");
    out.println("        movq %rdx, %rax");
  }

  public void Equal.genCode(PrintStream out){
    out.print("        jne ");
  }

  public void NotEqual.genCode(PrintStream out){
    out.print("        je ");
  }

  public void LesserThan.genCode(PrintStream out){
    out.print("        jge ");
  }

  public void GreaterThan.genCode(PrintStream out){
    out.print("        jle ");
  }

  public void LesserThanEqual.genCode(PrintStream out){
    out.print("        jg ");
  }

  public void GreaterThanEqual.genCode(PrintStream out){
    out.print("        jl ");
  }



  public void IdUse.genCode(PrintStream out) {
    out.println("        movq " + decl().address() + ", %rax");
  }

  public void IntegerValue.genCode(PrintStream out) {
    out.println("        movq $" + getINTEGER() + ", %rax");
  }


  public void Assignment.genCode(PrintStream out){
    getExpression().genCode(out);
    out.println("        movq %rax, "+ getIdUse().decl().address());
  }

  public void Declaration.genCode(PrintStream out){
    if(hasAssignment()){
      getAssignment().genCode(out);
      out.println("        movq %rax, "+ getIdDecl().address());
    }else{
      out.println("        movq $0, "+ getIdDecl().address());
    }
  }

  /**
   * Address of local variable variable in the current stack frame.
   */
  syn String IdDecl.address() = "-"+(localIndex()*8)+"(%rbp)";

  /**
   * Local variable counting.
   */
  syn int ASTNode.numLocals() = lastNode().localIndex() - localIndex();

  /**
   * Local variable numbering.
   */
  syn int ASTNode.localIndex() = prevNode().localIndex();
  eq Program.localIndex() = 0;
  eq IdDecl.localIndex() = prevNode().localIndex() + 1;

  inh ASTNode ASTNode.prevNode();
  eq ASTNode.getChild(int i).prevNode() = prevNode(i);
  syn ASTNode ASTNode.lastNode() = prevNode(getNumChild());
  syn ASTNode ASTNode.prevNode(int i) = i>0 ? getChild(i-1).lastNode() : this;


}
