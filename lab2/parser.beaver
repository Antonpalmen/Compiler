%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals ID, LPAR, RPAR, LBRACKET, RBRACKET, INT, SEMI, ASSIGN, NUMERAL, ADD, SUB, MUL, DIV, MOD;

%typeof program = "Program";
%typeof function = "Function";
%typeof functionList = "List";
%typeof idDecl = "IdDecl";
%typeof idUse = "IdUse";
%typeof declaration = "Declaration";
%typeof assignment = "Assignment";
%typeof statementList = "List";
%typeof statement = "Statement";
%typeof expression = "Expression";
%typeof term = "Expression";
%typeof factor = "Expression";
%typeof numeral = "Numeral";
%typeof add = "Add";
%typeof sub = "Sub";
%typeof mul = "Mul";
%typeof div = "Div";
%typeof mod = "Mod";


%goal program;

program = functionList.list {: return new Program(list); :} ;
idDecl = ID.id {: return new IdDecl(id); :} ;

functionList =
    function.f {: return new List().add(f); :}
    | functionList.list function.f {: return list.add(f); :} ;

function =
    INT idDecl.funcID LPAR RPAR LBRACKET statementList.list RBRACKET {: return new Function(funcID, list); :}
    | INT idDecl.funcID LPAR RPAR LBRACKET RBRACKET {: return new Function(funcID, new List()); :}
    ;

statementList =
	statement.stmt {: return new List().add(stmt); :}
	| statementList.stmtList statement.stmt {: return stmtList.add(stmt); :} ;

statement = declaration
			| assignment;
declaration = INT idDecl.id SEMI {: return new Declaration(id); :} ;
assignment = idDecl.id ASSIGN expression.expr SEMI {: return new Assignment(id, expr); :} ;


expression = add
			 | sub
			 | term;

add = expression.e ADD term.t {: return new Add(e, t); :} ;
sub = expression.e SUB term.t {: return new Sub(e, t); :} ;

term = mul
	   | div
	   | mod
	   | factor;

factor = idUse
		 | numeral
		 | LPAR expression RPAR;

mul = term.t MUL factor.f {: return new Mul(t, f); :} ;
div = term.t DIV factor.f {: return new Div(t, f); :} ;
mod = term.t MOD factor.f {: return new Mod(t, f); :} ;

numeral = NUMERAL.num {: return new Numeral(num); :} ;

idUse = ID.id{: return new IdUse(id); :} ;
idDecl = ID.id {: return new IdDecl(id); :} ;
